#+TITLE: Doom Emacs Configuration
#+STARTUP: fold

* Table of Contents :TOC:noexport:
- [[#about-this-configuration][About this Configuration]]
- [[#about-me][About Me]]
- [[#basic-configuration][Basic Configuration]]
  - [[#other-doom-emacs-configuration-files-init--packages][Other Doom Emacs Configuration Files (init / packages)]]
  - [[#emacs-startup][Emacs Startup]]
  - [[#ui-configuration][UI Configuration]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
  - [[#self-written-extensions][Self-written extensions]]
  - [[#ui-configuration-1][UI Configuration]]
  - [[#workflow-configuration][Workflow Configuration]]
  - [[#org-publish-exporting-org-files][Org Publish (Exporting org files)]]
  - [[#additional-org-packages][Additional Org Packages]]
  - [[#org-roam-specific][Org-Roam Specific]]
- [[#additional-packages][Additional Packages]]
  - [[#dired-file-manager][Dired (File Manager)]]
  - [[#languages-ide-using-language-server][Languages (IDE using Language Server)]]
  - [[#projectile][Projectile]]
  - [[#eshell][Eshell]]
  - [[#hold-magit][HOLD Magit]]
  - [[#mail-in-emacs-with-mu4e][Mail in Emacs with mu4e]]
  - [[#password-save][Password Save]]
  - [[#deft][Deft]]

* About this Configuration
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+begin_src emacs-lisp :comments no :tangle ./.doom.d/config.el
;;; config.el -*- lexical-binding: t; -*-
;;; In case you run in trouble:
;;(toggle-debug-on-error)
;; This Configuration File is managed by ~/Emacs.org. See additional comments there.
#+end_src

* About Me

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq user-full-name "Jonathan Pieper"
      user-mail-address "ody55eus@mailbox.org"
      epg-user-id "2361DFC839413E7A84B2152B01B6FB927AAEC59B")


#+end_src

* Basic Configuration
** Other Doom Emacs Configuration Files (init / packages)
*** Initialization (init.el)
**** Docstring

#+begin_src emacs-lisp :tangle ./.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

**** Enable Features

Just comment/uncomment some lines to disable/enable features.

#+begin_src emacs-lisp :tangle ./.doom.d/init.el

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company
        ;;+childframe
        )           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy
        +fuzzy
       ;; +childframe         ; display in a floating window
        +icons)               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format)          ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)  ; interactive buffer management
       (undo +tree)      ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup              ; navigate your code and its documentation
        +dictionary         ; dictionary/thesaurus is nice
        +docsets)           ; ...or in Dash docsets locally
       lsp               ; M-x vscode
       (magit            ; a git porcelain for Emacs
        +forge)          ; interface with git forges
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex             ; writing papers in Emacs has never been so fun
        +latexmk                    ; what else would you use?
        +cdlatex                    ; quick maths symbols
        +lsp                        ; language server
        +fold)                      ; fold the clutter away nicities
       ;;lean              ; for folks with too much to prove
       ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +pretty                     ; yessss my pretties! (nice unicode symbols)
        +dragndrop                  ; drag & drop files/images into org buffers
        ;;+hugo                     ; use Emacs for hugo blogging
        +noter                      ; enhanced PDF notetaking
        +jupyter                    ; ipython/jupyter support for babel
        +ipython                    ; ipython for babel
        +pandoc                     ; export-with-pandoc support
        +gnuplot                    ; who doesn't like pretty pictures
        ;;+pomodoro                 ; be fruitful with the tomato technique
        +present                    ; using org-mode for presentations
        +roam2)                     ; wander around notes
       php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python            ; beautiful is better than ugly
        +lsp               ; language server protocol
        +pyright           ;
        +conda)            ; Anaconda environment / package manager
       qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       rst               ; ReST in peace
       (ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       emms                ; Web Browser
       everywhere        ; *leave* Emacs!? You must be joking
       irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))

#+end_src

*** Doom Emacs Package Installation (packages.el)
**** Docstring

#+begin_src emacs-lisp :tangle ./.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

**** Load Packages

#+begin_src emacs-lisp :tangle ./.doom.d/packages.el

(package! evil-tutor)           ; Tutor to get familiar with doom emacs (and evil vi keybindings).
(package! org-roam)             ; Extended org-mode for Zettelkasten principle.
(package! org-bullets)          ; Display nice bullets in org-mode (deprecated).
(package! org-alert)            ; Enable org-mode notifications.
(package! org-tree-slide)       ; Enable org-mode presentations.
;;(package! org-superstar)        ; Alternative for org-bullets.
(package! org-pdfview)          ; Allows to annotate pdf in org-mode.
(package! org-download)
(package! org-journal)

;; Use latest version!
(unpin! org-roam org)
(unpin! bibtex-completion helm-bibtex ivy-bibtex)

;; Org Roam UI (frontend for exploring and interacting org-roam)
(package! websocket)
(package! org-roam-ui
  :recipe (:host github
           :repo "org-roam/org-roam-ui"
           :files ("*.el" "out")))

(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex"))

(package! org-protocol-capture-html
  :recipe (:host github
           :repo "alphapapa/org-protocol-capture-html"
           :files ("org-protocol-capture-html.el")))
(package! org-special-block-extras
  :recipe (:host github
           :repo "alhassy/org-special-block-extras"))

;; PlantUML
(package! ob-napkin)            ; PlantUML in Org Babel
(package! plantuml-mode)        ; PlantUML Diagrams

                                        ; Org Exports
(package! ox-twbs)      ; HTML Twitter Bootstrap
(package! ox-rst)       ; ReStructured Text (ReST, RST)

                                        ; Support for other File Types
(package! pdf-tools)            ; Additional pdf tools.
(package! nov)                  ; View epub files.

(package! emacs-bitwarden       ; Password Manager
  :recipe (:host github
           :repo "seanfarley/emacs-bitwarden"
           :files ("bitwarden.el")))

                                        ; Visual/Functional Enhancements
(package! rainbow-mode)         ; Converts #0000FF and (nested (parethesis)) into colored cues.
(package! emojify)              ; Convert ☺ into emoji's.
(package! dmenu)                ; Dmenu Plugin.
(package! tldr)                 ; Too long; Didn't read (short man pages).
(package! forge)                ; Additional git features (linking issues from github etc.)
(package! eshell-git-prompt)

(package! xkcd)
;;(package! beacon)               ; Highlight Cursor on big change

;;(package! synosaurus)           ; Thesaurus synonyms

;; Language Server
(package! lsp-mode)
(package! lsp-ui)
(package! lsp-treemacs)
(package! lsp-ivy)
(package! lsp-pyright)          ; Python language server
(package! lsp-latex)
(package! dap-mode)             ; Debugging Functions
(package! company-box)          ; Auto-Completion

                                        ; Packages to share my keybindings when streaming
;;(package! command-log-mode)
(package! keycast
  :recipe (:host github
           :repo "tarsius/keycast"))

#+end_src

** Emacs Startup
*** Improve Startup Performance

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun jp/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'jp/display-startup-time)

#+end_src

*** Start Emacs as Server!

#+begin_src emacs-lisp

(server-start)  ; Start Emacs as Server!

#+end_src

*** Default Variables
:Source:
Inspired by [[https://tecosaur.github.io/emacs-config/config.html#simple-settings][tecosaur]].
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
#+end_src

** UI Configuration
*** Keybindings (=:leader= ~SPC-<Key>~)
**** Basic Keybindings

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :leader
      (:prefix ("b" . "buffer")
       :desc "Counsel buffer" :n "j" #'counsel-switch-buffer
       :desc "Counsel buffer other window" :n "J" #'counsel-switch-buffer-other-window
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save)
      ;; (:prefix-map ("c" . "code"))
      ;; (:prefix-map ("d" . "dired"))
      ;; (:prefix-map ("f" . "file"))
      ;; (:prefix-map ("g" . "git"))
      ;; (:prefix-map ("h" . "help"))
      (:prefix ("i" . "insert")
       :desc "all-the-icons-insert" "a" #'all-the-icons-insert
       :desc "helm-ucs" "8" #'helm-ucs
       )
      ;; (:prefix-map ("m" . "org manage")
      ;;  (:prefix ("a" . "attatch"))
      ;;  (:prefix ("b" . "table"))
      ;;  (:prefix ("c" . "clock"))
      ;;  (:prefix ("d" . "date"))
      ;;  )
      (:prefix ("o" . "open")
       (:prefix ("j" . "jp")
        :desc "jp/org-roam-agenda" "a" #'jp/org-roam-agenda
        :desc "jp/enable-bitwarden" "b" #'jp/enable-bitwarden
        :desc "jp/go-to-inbox" "i" #'jp/go-to-inbox
        :desc "jp/go-to-projects" "p" #'jp/go-to-projects
        (:prefix ("r" . "roam")
         :desc "jp/org-roam-agenda" "a" #'jp/org-roam-agenda
         :desc "jp/org-roam-ignore-literature" "L" #'jp/org-roam-ignore-literature
         :desc "jp/org-roam-select-literature" "l" #'jp/org-roam-select-literature
         :desc "jp/org-roam-ignore-other" "O" #'jp/org-roam-ignore-other
         :desc "jp/org-roam-select-other" "o" #'jp/org-roam-select-other
         :desc "jp/org-roam-ignore-projects" "P" #'jp/org-roam-ignore-projects
         :desc "jp/org-roam-select-projects" "p" #'jp/org-roam-select-projects
         (:prefix ("r" . "review")
          :desc "jp/daily-review" "d" #'jp/daily-review
          :desc "jp/monthly-review" "m" #'jp/monthly-review
          :desc "jp/weekly-review" "w" #'jp/weekly-review
          )
         :desc "jp/org-roam-ignore-pc" "C" #'jp/org-roam-ignore-pc
         :desc "jp/org-roam-select-pc" "c" #'jp/org-roam-select-pc
         )
        )
       )
      ;; (:prefix-map ("p" . "projectile"))
      ;; (:prefix-map ("q" . "quit"))
      (:prefix ("s" . "search")
       :desc "Search/Insert BibTeX Cite" "c" #'helm-bibtex
       )
      (:prefix ("t" . "toogle")
       :desc "Toggle line highlight local" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle KeyCast Mode" "k" #'keycast-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines
       :desc "Toggle visual fill column" "v" #'visual-fill-column-mode
       (:prefix ("SPC" . "Whitespaces")
        :desc "Toggle local whitespace option" "l" #'whitespace-toggle-options
        :desc "Toggle global whitespace option" "g" #'global-whitespace-toggle-options
        :desc "Toggle local whitespace mode" "t" #'whitespace-mode
        :desc "Toggle global whitespace mode" "w" #'global-whitespace-mode
        )
       )
      (:prefix ("w" . "window")
       :desc "evil-window-left" :n "<left>" #'evil-window-left
       :desc "evil-window-right" :n "<right>" #'evil-window-right
       :desc "evil-window-up" :n "<up>" #'evil-window-up
       :desc "evil-window-down" :n "<down>" #'evil-window-down
       )
      (:prefix ("n" . "notes")
       (:prefix ("r" . "roam")
        :desc "Insert BibTeX Note Link" "b" #'orb-insert-link
        :desc "BibTeX Note Actions" "B" #'orb-note-actions
        :desc "Complete org-roam " :n "c" #'org-roam-complete-at-point
        :desc "New Daily Node (today)" :n "t" #'org-roam-dailies-capture-today
        :desc "Find org-roam Node" :n "f" #'org-roam-node-find
        :desc "Insert org-roam Node" :n "i" #'org-roam-node-insert
        :desc "Capture new org-roam Node" :n "n" #'org-roam-capture
        )
       )
      ;; (:prefix-map ("TAB" . "workspace"))
      )

#+end_src

**** Evaluate Elisp Expressions (~SPC-e~)

:SOURCE:
Original by [[https://www.distrotube.com/][Derek Taylor]] (see [[https://gitlab.com/dwt1/dotfiles][dwt1/dotfiles]])
:END:

Changing some keybindings from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window managers which sometimes use the control key in their keybindings.  By default, Doom Emacs does not use ~SPC-e~ for anything, so I choose to use the format ~SPC-e~ plus ~key~ for these (I also use ~SPC-e~ for ~eww~ keybindings).

| COMMAND         | DESCRIPTION                                  | KEYBINDING |
|-----------------+----------------------------------------------+------------|
| eval-buffer     | /Evaluate elisp in buffer/                     | SPC e b    |
| eval-defun      | /Evaluate the defun containing or after point/ | SPC e d    |
| eval-expression | /Evaluate an elisp expression/                 | SPC e e    |
| eval-last-sexp  | /Evaluate elisp expression before point/       | SPC e l    |
| eval-region     | /Evaluate elisp in region/                     | SPC e r    |

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :leader
      (:prefix ("e". "evaluate/EWW")
       :desc "Evaluate elisp in buffer" :n "b" #'eval-buffer
       :desc "Evaluate defun" :n "d" #'eval-defun
       :desc "Evaluate elisp expression" :n "e" #'eval-expression
       :desc "Evaluate last sexpression" :n "l" #'eval-last-sexp
       :desc "Evaluate elisp in region" :n "r" #'eval-region))

#+end_src

**** TODO Lookup (~SPC-l~)
#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :leader
      (:prefix ("l" . "lookup")
       :desc "helm-M-x" "c" #'helm-M-x
       :desc "helm-bibtex" "b" #'helm-bibtex
       :desc "helm-occur" "o" #'helm-occur
       :desc "helm-imenu" "i" #'helm-imenu
       :desc "helm-imenu-in-all-buffers" "I" #'helm-imenu-in-all-buffers
       :desc "helm-regexp" "r" #'helm-regexp
       :desc "helm-ucs" "S" #'helm-ucs
       :desc "helm-top" "T" #'helm-top
       :desc "helm-tldr" "t" #'helm-tldr
       :desc "helm-man-woman" "m" #'helm-man-woman
       )
      )

#+end_src

**** TODO Jump (~SPC-j~)
#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :leader
      (:prefix ("j" . "jump")
       :desc "avy-goto-char" "c" #'avy-goto-char
       :desc "avy-goto-char" "o" #'avy-goto-char-timer
       :desc "avy-goto-char-2" "O" #'avy-goto-char-2
       :desc "avy-imenu" "I" #'avy-imenu
       :desc "evil-avy-goto-line" "l" #'evil-avy-goto-line
       :desc "evil-avy-goto-word-0" "w" #'evil-avy-goto-word-0
       :desc "evil-avy-goto-subword-0" "W" #'evil-avy-goto-subword-0
       )
      )
#+end_src

**** Keybindings (=CTRL= ~C-w~ Window)
:Source:
Inspired by [[https://tecosaur.github.io/emacs-config/config.html#windows][Tecosaur]].
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)

#+end_src

**** Doom Dashboard
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(map! :map +doom-dashboard-mode-map
      :ne "f" #'find-file
      :ne "r" #'consult-recent-file
      :ne "p" #'jp/go-to-projects
      :ne "c" #'jp/go-to-config
      :ne "i" #'jp/go-to-inbox
      :ne "." (cmd! (doom-project-find-file "~/.config/")) ; . for dotfiles
      :ne "b" #'+vertico/switch-workspace-buffer
      :ne "B" #'counsel-switch-buffer)
#+end_src

*** Color Theme

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq doom-theme 'doom-vibrant)
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "DarkOrange"))

#+end_src

*** Font Face Configuration
**** New Configuration
:Source:
Inspired by [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]].
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq doom-font (font-spec :family "JetBrains Mono" :size 16)
      doom-big-font (font-spec :family "JetBrains Mono" :size 22)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
      doom-unicode-font (font-spec :family "JuliaMono" :size 16)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light :size 16))
#+end_src

**** Old System Dependent
#+begin_src emacs-lisp


;; Set the font face based on platform
(pcase system-type
  ((or 'gnu/linux 'windows-nt 'cygwin)
   (set-face-attribute 'default nil
                       :font "Source Code Pro"
                       :weight 'regular
                       :height 140)
   )
  ('darwin
   (set-face-attribute 'default nil :font "Source Code Pro for Powerline" :height 140)
   ))

;; Set the fixed pitch face
(pcase system-type
  ((or 'gnu/linux 'windows-nt 'cygwin)
   (set-face-attribute 'fixed-pitch nil
                       :font "Source Code Pro"
                       :weight 'regular
                       :height 140))
  ('darwin (set-face-attribute 'fixed-pitch nil :font "Source Code Pro for Powerline" :height 140)))

;; Set the variable pitch face
(pcase system-type
  ((or 'gnu/linux 'windows-nt 'cygwin)
   (set-face-attribute 'variable-pitch nil
                       ;; :font "Cantarell"
                       :font "Roboto"
                       :height 175
                       :weight 'light)
   )
  ('darwin (set-face-attribute 'variable-pitch nil
                               :font "Helvetica"
                               :height 175
                               :weight 'light)
           ))

#+end_src

*** Basic Emacs UI Enhancements
**** Line Numbers

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq display-line-numbers-type 'relative)

;; Disable Line Numbers for specific modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

**** White Spaces
:Source:
Inspired by [[http://ergoemacs.org/emacs/whitespace-mode.html][Xah]].
:END:
Sometimes I need some additional whitespace information. This function enables all important whitespaces:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defun jp/more-whitespaces ()
  (interactive)
  ;; Make whitespace-mode with very basic background coloring for whitespaces.
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark)))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “⇥” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [8677 9] [92 9]) ; tab
          ))
  (whitespace-mode 1))
#+end_src

Other useful codes:
|------+---------------------+------+---------------------------------------|
| char | codepoint (decimal) | hex  | name                                  |
|------+---------------------+------+---------------------------------------|
| ·    |                 183 | b7   | MIDDLE DOT                            |
| ¶    |                 182 | b6   | PILCROW SIGN                          |
| ↵    |                8629 | 21b5 | DOWNWARDS ARROW WITH CORNER LEFTWARDS |
| ↩    |                8617 | 21a9 | LEFTWARDS ARROW WITH HOOK             |
| ⏎    |                9166 | 23ce | RETURN SYMBOL                         |
| ▷    |                9655 | 25b7 | WHITE RIGHT POINTING TRIANGLE         |
| ▶    |                9654 | 25b6 | BLACK RIGHT-POINTING TRIANGLE         |
| →    |                8594 | 2192 | RIGHTWARDS ARROW                      |
| ↦    |                8614 | 21a6 | RIGHTWARDS ARROW FROM BAR             |
| ⇥    |                8677 | 21e5 | RIGHTWARDS ARROW TO BAR               |
| ⇨    |                8680 | 21e8 | RIGHTWARDS WHITE ARROW                |
|------+---------------------+------+---------------------------------------|
#+TBLFM: $3=$2 ;%x

**** Visible Bell

Disable the computer =beep= and activate a visual feedback instead.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Set up the visible bell
(setq visible-bell t)

#+end_src

**** Enable Menu Bar
This allows you to see some basic actions (activates dropdown menus File, Edit, Options, etc.)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(menu-bar-mode 1)

#+end_src

**** Enable Mouse (Backward, Forward) Buttons
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

**** Resize Startup Window

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/set-frame-size-according-to-resolution ()
  (interactive)
  (if window-system
  (progn
    ;; use 120 char wide window for largeish displays
    ;; and smaller 80 column windows for smaller displays
    ;; pick whatever numbers make sense for you
    (if (> (x-display-pixel-width) 1280)
           (add-to-list 'default-frame-alist (cons 'width 177))
           (add-to-list 'default-frame-alist (cons 'width 100)))
    ;; for the height, subtract a couple hundred pixels
    ;; from the screen height (for panels, menubars and
    ;; whatnot), then divide by the height of a char to
    ;; get the height we want
    (add-to-list 'default-frame-alist
         (cons 'height (/ (- (x-display-pixel-height) 120)
                             (frame-char-height)))))))

(jp/set-frame-size-according-to-resolution)

#+end_src

*** Doom Emacs Customization
**** Confirm Leaving Emacs
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq confirm-kill-emacs nil)           ;; Don't confirm every kill
#+end_src

**** Doom Evil Mode

#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq
 evil-want-fine-undo t                  ;; Undo Emacs Style
 evil-vsplit-window-right t             ;; Split windows the other way around
 evil-split-window-below t)
#+end_src

**** Doom Modeline
***** Basic Configuration
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(use-package! doom-modeline
  :custom-face
  (mode-line ((t (:height 1.0))))
  (mode-line-inactive ((t (:height 0.95))))
  :custom
  (doom-modeline-height 16)
  (doom-modeline-bar-width 4)
  (doom-modeline-lsp nil)
  (doom-modeline-modal-icon t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-major-mode-icon t)

  (defun doom-modeline-conditional-buffer-encoding ()
    "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
    (setq-local doom-modeline-buffer-encoding
                (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                   '(coding-category-undecided coding-category-utf-8))
                             (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                  t)))

  (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding) (doom-modeline-buffer-state-icon t))
#+end_src

***** Display Time in Modeline
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq display-time-24hr-format t                ;; Display 24 Hrs rather than 12
      display-time-default-load-average nil)    ;; Do not display my CPU Load
(display-time-mode 1)
#+end_src

**** Doom Dashboard

#+begin_src emacs-lisp
(setq +doom-dashboard-menu-sections '(("Reload last session" :icon
                                       (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
                                       :when
                                       (cond
                                        ((featurep! :ui workspaces)
                                         (file-exists-p
                                          (expand-file-name persp-auto-save-fname persp-save-dir)))
                                        ((require 'desktop nil t)
                                         (file-exists-p
                                          (desktop-full-file-name))))
                                       :face
                                       (:inherit
                                        (doom-dashboard-menu-title bold)
                                       :action doom/quickload-session)
                                      ("Open org-agenda" :icon
                                       (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
                                       :when
                                       (fboundp 'org-agenda)
                                       :action org-agenda)
                                      ("Recently opened files" :icon
                                       (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
                                       :action recentf-open-files)
                                      ("Open project" :icon
                                       (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
                                       :action projectile-switch-project)
                                      ("Jump to bookmark" :icon
                                       (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
                                       :action bookmark-jump)
                                      ("Open private configuration" :icon
                                       (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
                                       :when
                                       (file-directory-p doom-private-dir)
                                       :action doom/open-private-config)
                                      ("Open documentation" :icon
                                       (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
                                       :action doom/help)
                                      ("Open Roam Agenda"
                                       :icon
                                       (all-the-icons-octicon "checklist"
                                                               :face 'doom-dashboard-menu-title)
                                       :action jp/org-ram-agenda))

#+end_src

*** Open Bufferlist when splitting windows
This command runs ~counsel-switch-buffer~ after splitting a window. It automatically shows a preview of the selected buffer during selection.
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defadvice! prompt-for-buffer (&rest _)
  :after 'window-split
  (counsel-switch-buffer))
#+end_src

*** Additional Packages
**** Highlight Todos

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq hl-todo-keyword-faces
      '(("TODO"   . "#cc0")
        ("FIXME"  . "#990000")
        ("NOTE"   . "#009999")
        ("REVIEW"   . "#990099")
        ("DEBUG"  . "#A020F0")
        ("HACK"   . "#f60")
        ("GOTCHA" . "#FF4500")
        ("STUB"   . "#1E90FF")))

(hl-todo-mode)          ; Enable highlight todos

#+end_src

**** PDF Tools

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(pdf-tools-install)

;; Fit PDF in screen width
;; (setq pdf-view-display-size 'fit-width)

;; Show PDF in current Theme Colors
;; (add-hook 'pdf-view-mode-hook (lambda() (pdf-view-themed-minor-mode)))

;; Cut off unwritten borders of PDF.
;; (add-hook 'pdf-view-mode-hook (lambda() (pdf-view-auto-slice-minor-mode)))

#+end_src

**** nov.el (EPUB)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Open .epub with nov.el package
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; Set custom font for epub
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Roboto"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+end_src

**** WAIT SVG Tag Mode

Not working with Doom Emacs yet. Follow [[https://github.com/rougier/svg-tag-mode/issues/10][Issue on Github→]] for further information.

***** Example 1

#+begin_src emacs-lisp

(require 'svg-tag-mode)

(defface svg-tag-note-face
  '((t :foreground "black" :background "white" :box "black"
       :family "Roboto Mono" :weight light :height 140))
  "Face for note tag" :group nil)

(defface svg-tag-keyboard-face
  '((t :foreground "#333333" :background "#f9f9f9" :box "#333333"
       :family "Roboto Mono" :weight light :height 140))
  "Face for keyboard bindings tag" :group nil)

(defface svg-tag-org-face
  '((t :foreground "#333333" :background "#fffff0" :box "#333333"
       :family "Roboto Mono" :weight light :height 140))
  "Face for keyboard bindings tag" :group nil)

(setq svg-tag-todo
  (svg-tag-make "TODO" nil 1 1 2))

(setq svg-tag-note
  (svg-tag-make "NOTE" 'svg-tag-note-face 2 0 2))

(defun svg-tag-round (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-note-face 1 1 12))

(defun svg-tag-quasi-round (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-note-face 1 1 8))

(defun svg-tag-keyboard (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-keyboard-face 1 1 2))

(defun svg-tag-org (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-org-face 1 1 2))

(setq svg-tag-tags
      '(("@[0-9a-zA-Z]+:"                   . svg-tag-org)
        (":TODO:"                           . svg-tag-todo)
        (":NOTE:"                           . svg-tag-note)
        ("\([0-9a-zA-Z]\)"                  . svg-tag-round)
        ("\([0-9a-zA-Z][0-9a-zA-Z]\)"       . svg-tag-quasi-round)
        ("|[0-9a-zA-Z- ⇥></%⌘^→←↑↓]+?|"    . svg-tag-keyboard)))

(svg-tag-mode 1)

;; More examples:
;; --------------
;;
;;  Save ................. |C-x||C-s|  Help ............... |C-h|
;;  Save as .............. |C-x||C-w|  Cancel ............. |C-g|
;;  Open a new file ...... |C-x||C-f|  Undo ............... |C-z|
;;  Open recent .......... |C-x||C-r|  Close buffer ....... |C-x||k|
;;  Browse directory ......|C-x||d|    Quit ............... |C-x||C-c|
;;
;; ------------------------------------------------------------------------
;; (1)(2)(3)(4)(5)(Z)(W)(12)(99)
;; ------------------------------------------------------------------------

#+end_src

***** Example 2

#+begin_src emacs-lisp
;; :tangle ./.doom.d/config.el

(require 'svg-tag-mode)

(defface svg-tag-org-face
  '((t :foreground "#333333" :background "white"
       :box (:line-width 1 :color "black" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Default face for svg tag" :group nil)

(defface svg-tag-note-face
  '((t :foreground "#333333" :background "#FFFFFF"
       :box (:line-width 1 :color "#333333" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Default face for svg tag" :group nil)

(defface svg-tag-todo-face
  '((t :foreground "#ffffff" :background "#FFAB91"
       :box (:line-width 1 :color "#FFAB91" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for TODO  svg tag" :group nil)

(defface svg-tag-next-face
  '((t :foreground "white" :background "#673AB7"
       :box (:line-width 1 :color "#673AB7" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for NEXT svg tag" :group nil)

(defface svg-tag-done-face
  '((t :foreground "white" :background "#B0BEC5"
       :box (:line-width 1 :color "#B0BEC5" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for DONE  svg tag" :group nil)

(defface svg-tag-org-tag-face
  '((t :foreground "#ffffff" :background "#FFAB91"
       :box (:line-width 1 :color "#FFAB91" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for TODO  svg tag" :group nil)

(defface svg-tag-date-active-face
  '((t :foreground "white" :background "#673AB7"
       :box (:line-width 1 :color "#673AB7" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for active date svg tag" :group nil)

(defface svg-tag-time-active-face
  '((t :foreground "#673AB7" :background "#ffffff"
       :box (:line-width 1 :color "#673AB7" :style nil)
       :family "Roboto Mono" :weight light :height 140))
  "Face for active time svg tag" :group nil)

(defface svg-tag-date-inactive-face
  '((t :foreground "#ffffff" :background "#B0BEC5"
       :box (:line-width 1 :color "#B0BEC5" :style nil)
       :family "Roboto Mono" :weight regular :height 140))
  "Face for inactive date svg tag" :group nil)

(defface svg-tag-time-inactive-face
  '((t :foreground "#B0BEC5" :background "#ffffff"
       :box (:line-width 2 :color "#B0BEC5" :style nil)
       :family "Roboto Mono" :weight light :height 140))
  "Face for inactive time svg tag" :group nil)

(setq svg-tag-org-todo (svg-tag-make "TODO" 'svg-tag-todo-face 1 1 2))
(setq svg-tag-org-done (svg-tag-make "DONE" 'svg-tag-done-face 1 1 2))
(setq svg-tag-org-hold (svg-tag-make "HOLD" 'svg-tag-org-face 1 1 2))
(setq svg-tag-org-next (svg-tag-make "NEXT" 'svg-tag-next-face 1 1 2))
(setq svg-tag-org-note-tag (svg-tag-make "NOTE" 'svg-tag-note-face 1 1 2))
(setq svg-tag-org-canceled-tag (svg-tag-make "CANCELED" 'svg-tag-note-face 1 1 2))

(defun svg-tag-make-org-tag (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-org-tag-face 1 1 2))
(defun svg-tag-make-org-priority (text)
  (svg-tag-make (substring text 2 -1) 'svg-tag-org-face 1 0 2))

(defun svg-tag-make-org-date-active (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-date-active-face 0 0 0))
(defun svg-tag-make-org-time-active (text)
  (svg-tag-make (substring text 0 -1) 'svg-tag-time-active-face 1 0 0))
(defun svg-tag-make-org-range-active (text)
  (svg-tag-make (substring text 0 -1) 'svg-tag-time-active-face 0 0 0))

(defun svg-tag-make-org-date-inactive (text)
  (svg-tag-make (substring text 1 -1) 'svg-tag-date-inactive-face 0 0 0))
(defun svg-tag-make-org-time-inactive (text)
  (svg-tag-make (substring text 0 -1) 'svg-tag-time-inactive-face 1 0 0))
(defun svg-tag-make-org-range-inactive (text)
  (svg-tag-make (substring text 0 -1) 'svg-tag-time-inactive-face 0 0 0))


(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
(defconst day-re "[A-Za-z]\\{3\\}")

(setq svg-tag-tags
      `(("@[0-9a-zA-Z]+:"                   . svg-tag-make-org-tag)
        ("@NOTE:"                           . svg-tag-org-note-tag)
        ("@CANCELED:"                       . svg-tag-org-canceled-tag)
        ("\\[#[ABC]\\]"                     . svg-tag-make-org-priority)
        (" TODO "                           . svg-tag-org-todo)
        (" DONE "                           . svg-tag-org-done)
        (" NEXT "                           . svg-tag-org-next)
        (" HOLD "                           . svg-tag-org-hold)

        (,(concat "<" date-re  "[ >]")             . svg-tag-make-org-date-active)
        (,(concat "<" date-re " " day-re "[ >]")   . svg-tag-make-org-date-active)
        (,(concat time-re ">")                     . svg-tag-make-org-time-active)
        (,(concat time-re "-" time-re ">")         . svg-tag-make-org-range-active)

        (,(concat "\\[" date-re  "[] ]")           . svg-tag-make-org-date-inactive)
        (,(concat "\\[" date-re " " day-re "[] ]") . svg-tag-make-org-date-inactive)
        (,(concat time-re "\\]")                   . svg-tag-make-org-time-inactive)
        (,(concat time-re "-" time-re "\\]")       . svg-tag-make-org-range-inactive)))

(svg-tag-mode)

#+end_src

**** Keycast Mode

:Source:
Configuration from https://github.com/tarsius/keycast/issues/7#issuecomment-627604064
:END:

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(after! keycast
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update))))
(add-to-list 'global-mode-string '("" mode-line-keycast))

#+end_src

* Org Mode
** Org Configuration
*** Directories and Files

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-roam-v2-ack t); Disable Warning for org-roam v2
(setq org-directory "~/org/"
      org-agenda-files '("~/org/Agenda.org"
                         "~/org/Tasks.org"
                         "~/org/Habits.org"
                         ;;"~/org/Emails.org"
                         )
      org-default-notes-file (concat org-directory "/Notes.org")
      org-clock-sound "~/sounds/ding.wav")

(setq auth-sources '((:source "~/.authinfo.gpg")))

#+end_src

** Self-written extensions
*** Select Org Roam Notes
**** Select by Folder Prefix
:Source:
These extra functions are inspired by the System Crafters live stream of September 3rd 2021:
https://systemcrafters.net/live-streams/september-03-2021/
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defun jp/org-roam-select-prefix (prefix)
  (org-roam-node-read
   nil
   (lambda (node)
     (string-prefix-p
      (concat org-roam-directory prefix)
      (org-roam-node-file node))
     )
   ))

(defun jp/org-roam-ignore-prefix (prefix)
  (org-roam-node-read
   nil
   (lambda (node)
     (not (string-prefix-p
           (concat org-roam-directory prefix)
           (org-roam-node-file node))
          ))
   ))

(defun jp/org-roam-ignore-literature ()
  (interactive)
  (jp/org-roam-ignore-prefix "/Literature"))

(defun jp/org-roam-select-literature ()
  (interactive)
  (jp/org-roam-select-prefix "/Literature"))

(defun jp/org-roam-ignore-pc ()
  (interactive)
  (jp/org-roam-ignore-prefix "/PC"))

(defun jp/org-roam-select-pc ()
  (interactive)
  (jp/org-roam-select-prefix "/PC"))

(defun jp/org-roam-ignore-projects ()
  (interactive)
  (jp/org-roam-ignore-prefix "/Projects"))

(defun jp/org-roam-select-projects ()
  (interactive)
  (jp/org-roam-select-prefix "/Projects"))

(defun jp/org-roam-ignore-other ()
  (interactive)
  (jp/org-roam-ignore-prefix "/20"))

(defun jp/org-roam-select-other ()
  (interactive)
  (jp/org-roam-select-prefix "/20"))
#+end_src

**** Select by Assigned Tags
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defun jp/org-roam-get-tagged (&optional tag)
  (mapcar
   #'org-roam-node-file
   (seq-filter
    (lambda (node)
      (member tag (org-roam-node-tags node)))
    (org-roam-node-list))))

(defun jp/org-roam-agenda ()
  (interactive)
  (let ((org-agenda-files (jp/org-roam-get-tagged "Tasks")))
  (org-agenda)))
#+end_src

*** Reading  a File from Template
:Source:
Inspired from [[https://github.com/benoitj/dotfiles][benoitj/dotfiles]] (see [[https://github.com/benoitj/dotfiles/tree/main/dot_config/emacs.local/templates][dot_config/emacs.local/templates]] and [[https://github.com/benoitj/dotfiles/blob/main/dot_config/doom/%2Borg.el#L28][dot_config/doom/+org.el (Lines 28ff)]]).
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq org-templates-directory (concat doom-private-dir "/templates/"))
(defun jp/read-template (template)
  "Reading TEMPLATE as a file from org-templates-directory.
Returns file content as a string."
  (with-temp-buffer
    (insert-file-contents (concat org-templates-directory template))
    (buffer-string)))
(defun jp/read-newproject-template ()
  (jp/read-template "new-project.org"))
(defun jp/read-dailyreview-template ()
  (jp/read-template "daily-review.org"))
(defun jp/read-weekly-template ()
  (jp/read-template "weekly-review.org"))
(defun jp/read-monthly-template ()
  (jp/read-template "monthly-review.org"))
(defun jp/read-meeting-template ()
  (jp/read-template "Meeting.org"))
(defun jp/read-script-template ()
  (jp/read-template "script.org"))
#+end_src

*** Regular Reviews
:Source:
Inspired from [[https://github.com/benoitj/dotfiles][benoitj/dotfiles]].
:END:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/daily-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "~/ZK/daily/reviews.org")
                                  (file "~/.doom.d/templates/daily-review.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (org-clock-in))))

(defun jp/weekly-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Review: Weekly Review" entry (file+olp+datetree "~/ZK/daily/reviews.org")
                                  (file "~/.doom.d/templates/weekly-review.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (org-clock-in))))

(defun jp/monthly-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Review: Monthly Review" entry (file+olp+datetree "~/ZK/daily/reviews.org")
                                  (file "~/.doom.d/templates/monthly-review.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (org-clock-in))))
#+end_src

*** Project Management
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defun jp/go-to-projects (&optional name head)
  ""
  (interactive)
  (let* ((headline-regex (or head "* Projects"))
         (node (jp/org-roam-select-projects)))
    (org-roam-node-visit node)
    ;;(org-roam-node-find-noselect node)
    (widen)
    (beginning-of-buffer)
    (re-search-forward headline-regex)
    (beginning-of-line)))
  #+end_src

** UI Configuration
*** Visual Feedback
**** Ellipsis symbol (folding)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-ellipsis " ▼ ")

#+end_src

**** Visual Enhancements

#+Begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/org-mode-setup ()
  (org-indent-mode 1)
  (mixed-pitch-mode 1) ; Enable different Fonts
  ;;(org-roam-setup) ; Enable org-roam-db-autosync
  (setq org-image-actual-width nil) ; Set optional images
  (rainbow-mode 1)    ; Enable rainbow mode
  (visual-line-mode 1))

(add-hook 'org-mode-hook #'jp/org-mode-setup)

#+end_src

**** Hiding Emphasis Marker

Hiding some emphasis marker (* / = )  when using them to /highlight/ *text*.
Set this value to ~nil~ to display them again.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-hide-emphasis-markers t)      ; Hides *strong* /italic/ =highlight= marker

#+end_src

**** Visual Fill Column (add spaces and center text)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/org-visual-fill-column ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(add-hook 'org-mode-hook #'jp/org-visual-fill-column)

#+end_src

**** Org Bullets

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) ; Enable org-mode bullets

#+end_src

**** Font Configuration
***** Text Size Org Headlines

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; setting org headlines
(custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
  )

  #+end_src

***** Setting Text Fonts for Mixed Fixed Pitch

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Make sure org-indent face is available
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block-begin-line nil :foreground "#999" :height 110 :inherit 'fixed-pitch)
(set-face-attribute 'org-block-end-line nil :foreground "#999" :height 110 :inherit 'fixed-pitch)
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
(set-face-attribute 'org-drawer nil :inherit 'fixed-pitch :foreground "SkyBlue4")

#+end_src

*** Tasks Appearance
**** Color and weight of keywords

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-todo-keyword-faces '(
                               ("PROJ" . "DarkGreen")
                               ("EPIC" . (:foreground "DodgerBlue" :weight bold))
                               ("TODO" . org-warning)
                               ("IDEA" . (:foreground "BlueViolet"))
                               ("BACKLOG" . (:foreground "GreenYellow" :weight normal :slant italic :underline t))
                               ("PLAN" . (:foreground "Magenta1" :weight bold :underline t))
                               ("ACTIVE" . (:foreground "Systemyellowcolor" :weight bold :slant italic :underline t))
                               ("REVIEW" . (:foreground "Darkorange2" :weight bold :underline t))
                               ("WAIT" . (:foreground "yellow4" :weight light :slant italic))
                               ("HOLD" . (:foreground "red4"))
                               ("KILL" . "red")
                               ("CANCELLED" . (:foreground "red3" :weight bold :strike-through t))
                               )
      )

#+end_src

** Workflow Configuration
*** Task Keywords
The Task Keywords are noted with their keybindings in parentheses.

|-----------------+-------------------------------------|
| Special Symbols | Meaning                             |
|-----------------+-------------------------------------|
| =@=               | Append Note when set to this State. |
| =!=               | Add Timestamp to Logbook.           |
|-----------------+-------------------------------------|

|---------+----------------------------------------------------------------------------------|
| Seq 1   | Description                                                            @tasks    |
|---------+----------------------------------------------------------------------------------|
| ~PROJ(p)~ | Bigger ongoing Projects.                                                         |
| ~EPIC(e)~ | Epic Tasks: A specific problem with a pre-defined reachable goal.                |
| ~TODO(t)~ | Single tasks to accomplish in reasonable time (/Hint/: Set effort to range tasks). |
| ~IDEA(i)~ | Small ideas that could grow into something beautiful. (optional)                 |
|---------+----------------------------------------------------------------------------------|
| ~DONE(d)~ | Finished Tasks                                                                   |
|---------+----------------------------------------------------------------------------------|

|--------------+------------------------------------------------------------------------|
| Seq 2        | Description                                                   @backlog |
|--------------+------------------------------------------------------------------------|
| ~BACKLOG(b)~   | Tasks that are on the back of my head, if nothing else holds priority. |
|--------------+------------------------------------------------------------------------|
| ~PLAN(p)~      | Planning Phase                                                (#Max=5) |
| ~ACTIVE(a)~    | Active Tasks                                                  (#Max=5) |
| ~REVIEW(r)~    | .                                                             (#Max=5) |
| ~WAIT(w@/!)~   | Waiting on external influences (*Explain and Log this*).        (#Max=∞) |
| ~HOLD(h)~      | Holding back until my time is free again.                     (#Max=∞) |
|--------------+------------------------------------------------------------------------|
| ~COMPLETED(c)~ |                                                                        |
| ~KILL(k)~      |                                                                        |
| ~STOPPED(s@)~  | Stopped a task. *Explain this*.                                          |
|--------------+------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-todo-keywords '(
                          (sequence "TODO(t)" "EPIC(e)" "PROJ(p)" "|"
                                "DONE(d)")
                          (sequence "BACKLOG(b)" "PLAN(P)" "ACTIVE(a)"
                                    "REVIEW(r)" "WAIT(W@/!)" "HOLD(h)" "|"
                                    "COMPLETED(c)" "KILL(k)" "CANCELLED(C)" "STOPPED(s@)")
                        )
      )

#+end_src

*** TODO Capture Templates

- [[https://orgmode.org/manual/Template-elements.html#Template-elements][Org-Mode Template Elements→]]
- [[https://www.orgroam.com/manual.html#The-Templating-System][Org-Roam Templating System→]]

**** TODO Org Capture Templates

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-capture-templates '(
                              ("a" "Agenda")
                              ("ah" "Home" entry (file+headline "~/org/Agenda.org" "Home")
                               "* TODO %?\n %i\n %a")
                              ("as" "Sys" entry (file+headline "~/org/Agenda.org" "Sys")
                               "* TODO %?\n %i\n %a")
                              ("M" "Meeting" entry
                               (file+olp+datetree "~/org/Meetings.org")
                               (function jp/read-meeting-template)
                               :clock-in :clock-resume
                               :empty-lines 1)
                              ("m" "Email Workflow")
                              ("mf" "Follow Up" entry (file+olp "~/org/Mail.org" "Follow Up")
                               "* TODO %a\n%?\n#+begin_quote\n%x\n#+end_quote")
                              ("mr" "Read Later" entry (file+olp "~/org/Mail.org" "Read Later")
                               "* TODO %a\n%?\n#+begin_quote\n%x\n#+end_quote%x")
                              ("l" "Logbook Entries")
                              ("ls" "Software" entry
                               (file+olp+datetree "~/org/Logbook.org")
                               "\n* %U %a%? :Software:"
                               :clock-in :clock-resume)
                              ("lh" "Hardware" entry
                               (file+olp+datetree "~/org/Logbook.org")
                               "\n* %U %a%? :Hardware:"
                               :clock-in :clock-resume)
                              ("lc" "Configuration" entry
                               (file+olp+datetree "~/org/Logbook.org")
                               "\n* %U %a%? :Configuration:"
                               :clock-in :clock-resume)
                              ("s" "Create Scripts")
                              ("ss" "shell" entry
                               (file+headline "~/org/scripts/%<%Y%m%d%H%M%S>.org" "Scripts")
                               (function jp/read-script-template)
                               :clock-in :clock-resume
                               :empty-lines 1)
                              ("f" "Fleeting Note" entry (file+headline "~/org/Notes.org" "Tasks")
                               "* %?\n %x\n %i\n %a")
                              ("t" "Task Entries")
                              ("tt" "Todo Task" entry (file+headline "~/org/Notes.org" "Tasks")
                               "* TODO %?\n %i\n %a")
                              ("te" "Epic Task" entry (file+headline "~/org/Notes.org" "Epic")
                               "* EPIC %?\n %i\n %a")
                              ("ti" "New Idea" entry (file+headline "~/org/Notes.org" "Ideas")
                               "* IDEA %?\n %i\n %a")))

#+end_src

**** TODO Org Roam Capture Templates
- Add some custom permanent notes templates.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-roam-capture-templates
      '(("d" "default" plain
         "%?\n\nSee also %a.\n"
         :if-new (file+head
                  "%<%Y%m%d%H%M%S>-${slug}.org"
                  "#+title: ${title}\n")
         :unnarrowed t)
        ("j" "Projects" plain
         (function jp/read-newproject-template)
         :if-new (file+head
                  "Projects/%<%Y%m%d%H%M%S>-${slug}.org"
                  "#+title: ${title}\n")
         :clock-in :clock-resume
         :unnarrowed t
         )
        ("i" "Individuum / Persona" plain
         "%?\n\nSee also %a.\n"
         :if-new (file+head
                  "People/%<%Y%m%d%H%M%S>-${slug}.org"
                  "#+title: ${title}\n")
         :unnarrowed t
         )
        ("l" "Literature")
        ("ll" "Literature Note" plain
         "%?\n\nSee also %a.\n* Links\n- %x\n* Notes\n"
         :if-new (file+head
                  "Literature/%<%Y%m%d%H%M%S>-${slug}.org"
                  "#+title: ${title}\n")
         :unnarrowed t
         )
        ("lr" "Bibliography reference" plain
         "#+ROAM_KEY: %^{citekey}\n#+PROPERTY: type %^{entry-type}\n#+FILETAGS: %^{keywords}\n#+AUTHOR: %^{author}\n%?"
         :if-new (file+head
                  "References/${citekey}.org"
                  "#+title: ${title}\n")
         :unnarrowed t
         )
        ("p" "PC" plain
         "%?\n\nSee also %a.\n"
         :if-new (file+head
                  "PC/%<%Y%m%d%H%M%S>-${slug}.org"
                  "#+title: ${title}\n#+date: %U")
         :unnarrowed t
         )
        )
      )

#+end_src

**** Org Roam Capture Ref Templates (Capture Websites)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq org-roam-capture-ref-templates '(
                                       ("r" "Reference" plain
                                        "%?\n\n* Citations\n#+begin_quote\n${body}\n#+end_quote"
                                        :if-new (file+head
                                                 "Literature/%<%Y%m%d%H%M%S>-${slug}.org"
                                                 "#+title: ${title}\n#+date: %U\n")
                                        :unnarrowed t
                                        )
                                       ("l" "Literature References" plain
                                        "%?\n\n* Abstract\n#+begin_quote\n${body}\n#+end_quote"
                                        :if-new (file+head
                                                 "References/%<%Y%m%d%H%M%S>-${slug}.org"
                                                 "#+title: ${title}\n#+date: %U\n#+ROAM_REF: ${ref}")
                                        :unnarrowed t
                                        :empty-lines 1)
                                       ("w" "Web site" entry
                                        :target (file+head
                                                 "Literature/%<%Y%m%d%H%M%S>-${slug}.org"
                                                 "#+title: ${title}\n#+date: %U\n")
                                        "* %a :website:\n\n%U %?\n\n#+begin_quote\n%:initial\n#+end_quote")
                                       )
      )

#+end_src

**** TODO Org Roam Dailies Capture Templates
- Add some custom floating notes templates.
- Add org protocol templates

:Source:
The daily / monthly review templates are inspired by [[https://github.com/benoitj/dotfiles/tree/main/dot_config/emacs.local/templates][Benoit Joly's templates]].
:END:

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :if-new (file+head
                  "%<%Y-%m-%d>.org"
                  "#+title: %<%Y-%m-%d>\n[[roam:%<%Y-%B>]]\n")
         :kill-buffer t
         )
        ("j" "Journal entry" entry
         "* ~%<%H:%M>~ - Journal  :journal:\n\n%?\n\n"
         :if-new (file+head+olp
                  "%<%Y-%m-%d>.org"
                  "#+title: %<%Y-%m-%d>\n"
                  ("Journal"))
         :kill-buffer t
         )
        ("l" "Monthly Log" entry
         "* %?\n  %U\n  %a\n  %i"
         :if-new (file+head+olp
                  "%<%Y-%B>.org"
                  "#+title: %<%Y-%B>\n"
                  ("Log"))
         :kill-buffer t
         )
        ("m" "meeting" entry
         (file "~/.dotfiles/.doom.d/templates/Meeting.org")
         :if-new (file+head+olp
                  "%<%Y-%m-%d>.org"
                  "#+title: %<%Y-%m-%d>\n[[roam:%<%Y-%B>]]\n"
                  ("Meetings")))
        ("r" "Review")
        ("rd" "Daily Review" entry
         (file+head
          "%<%Y-%m-%d>.org"
          "#+title: %<%Y-%m-%d>\n[[roam:%<%Y-%B>]]\n")
         (file "~/.dotfiles/doom/.doom.d/templates/daily-review.org"))
        ("rm" "Monthly Review" entry
         (file "~/.dotfiles/.doom.d/templates/monthly-review.org")
         :if-new (file+head
                  "%<%Y-%B>.org"
                  "#+title: %<%Y-%B>\n"))))

#+end_src

*** TODO Custom Agenda View

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 20)))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Backlog Tasks")))
          (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
          (todo "REVIEW" ((org-agenda-overriding-header "Active Reviews")))
          (todo "EPIC" ((org-agenda-overriding-header "Active Epics")))))

        ("T" "All Todo Tasks"
         ((todo "TODO"
                ((org-agenda-overriding-header "Todo Tasks")))))

        ("W" "Work Tasks" tags-todo "+work")

        ;; Low-effort next actions
        ("E" tags-todo "+TODO=\"EPIC\"+Effort<15&+Effort>0"
         ((org-agenda-overriding-header "Low Effort Tasks")
          (org-agenda-max-todos 20)
          (org-agenda-files org-agenda-files)))

        ("w" "Workflow Status"
         ((todo "WAIT"
                ((org-agenda-overriding-header "Waiting on External")
                 (org-agenda-files org-agenda-files)))
          (todo "REVIEW"
                ((org-agenda-overriding-header "In Review")
                 (org-agenda-files org-agenda-files)))
          (todo "PLAN"
                ((org-agenda-overriding-header "In Planning")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Project Backlog")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "READY"
                ((org-agenda-overriding-header "Ready for Work")
                 (org-agenda-files org-agenda-files)))
          (todo "ACTIVE"
                ((org-agenda-overriding-header "Active Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "COMPLETED"
                ((org-agenda-overriding-header "Completed Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "CANC"
                ((org-agenda-overriding-header "Cancelled Projects")
                 (org-agenda-files org-agenda-files)))))
        ("h" "Daily habits"
         ((agenda ""))
         ((org-agenda-show-log t)
          (org-agenda-ndays 14)
          (org-agenda-log-mode-items '(state))
          (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))
        ;; other commands here
        ))

#+end_src

*** Task Tags

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@sys" . ?S)
         ("@home" . ?H)
         ("@work" . ?W)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

#+end_src

*** Task Priorities

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-lowest-priority ?E) ;; Priorities A to E

#+end_src

*** Refile Targets

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

#+end_src

*** Archive Location

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-archive-location ".archive/%s::")

#+end_src

*** Enable Auto-Save after Refile

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

#+end_src

*** Enable Org Habits

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(add-to-list 'org-modules 'org-habit)

#+end_src

** Org Publish (Exporting org files)
*** LaTeX

See also [[https://orgmode.org/worg/org-tutorials/org-latex-export.html][Online Documentation]] for LaTeX Export for Org Mode.

 | LATEX_CLASS  | Document Class | Description                      |
 |--------------+----------------+----------------------------------|
 | =koma-article= | =scrartcl=       | Normal article                   |
 | =aip-rst=      | =revtex4-1=      | Paper Template for AIP Journals: |
 |              |                | Review of Scientific Instruments |

#+begin_src emacs-lisp :tangle ./.doom.d/config.el :results none

;; (setq org-latex-to-pdf-process '("texi2dvi --pdf --clean --verbose --batch %f"))

(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

;; Define Koma Article Class
(add-to-list 'org-latex-classes
             '("koma-article"
               "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")))

;; Define Review of Scientific Instruments Class
(add-to-list 'org-latex-classes
             '("aip-rsi"
               "\\documentclass[
                aip, % AIP Journals
                rsi, % Review of Scientific Instruments
                amsmath,amssymb, % Basic Math Packages
                preprint, % or reprint
                ]{revtex4-1}
\\include{structure}
[NO-DEFAULT-PACKAGES]
[NO-EXTRA]
[NO-PACKAGES]

%% Apr 2021: AIP requests that the corresponding
%% email to be moved after the affiliations
\\makeatletter
\\def\\@email#1#2{%
 \\endgroup
 \\patchcmd{\\titleblock@produce}
  {\\frontmatter@RRAPformat}
  {\\frontmatter@RRAPformat{\\produce@RRAP{*#1\\href{mailto:#2}{#2}}}\\frontmatter@RRAPformat}
  {}{}
}%
\\makeatother"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ))

(defun org-export-latex-no-toc (depth)
    (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))
  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

#+end_src

*** HTML
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(add-to-list 'org-link-abbrev-alist '("ody5" . "https://gitlab.ody5.de/"))
(add-to-list 'org-link-abbrev-alist '("gitlab" . "https://gitlab.com/"))
#+end_src

*** PlantUML
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq plantuml-default-exec-mode 'jar)
(setq plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
#+end_src

** Additional Org Packages
*** Org Alert
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(require 'org-alert)
#+end_src

*** Org Msg
Doom does a fantastic stuff with the defaults with this, so we only make a few minor tweaks.
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq +org-msg-accent-color "#1a5fb4"
      org-msg-greeting-fmt "\nHi %s,\n\n"
      org-msg-signature "\n\n#+begin_signature\nAll the best,\\\\\n@@html:<b>@@Jonathan@@html:</b>@@\n#+end_signature")
(map! :map org-msg-edit-mode-map
      :after org-msg
      :n "G" #'org-msg-goto-body)
#+end_src
*** Org Tempo
:SOURCE:
Description by [[https://www.distrotube.com/][Derek Taylor]] (see [[https://gitlab.com/dwt1/dotfiles][dwt1/dotfiles]])
:END:

This enables auto completion to easily create OrgBabel code blocks in org mode!

Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("uml" . "src plantuml :file uml.png"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src

*** TODO Org Special Block Extras

Templating System to export org documents into LaTeX, HTML, etc. with individual templates.
See [[https://github.com/alhassy/org-special-block-extras][Github Repo→]] for further information.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Enable Special Blocks in Org-Mode
(add-hook #'org-mode-hook #'org-special-block-extras-mode)

;; Use short names like ‘defblock’ instead of the fully qualified name
;; ‘org-special-block-extras--defblock’
;; (org-special-block-extras-short-names)
#+end_src

*** Org Tree Slide (Presentations)
Make sure the package =org-tree-slide= is loaded (put this into your =packages.el=):

#+begin_src emacs-lisp
(package! org-tree-slide)
#+end_src

This Configuration runs on start end finish of presentations:

#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(defun jp/presentation-setup()
  ;;(setq text-scale-mode-amount 3)
  ;;(text-scale-mode 1)
  (org-display-inline-images)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " // ")
  )

(defun jp/presentation-end()
  ;;(text-scale-mode 0)
  )

(add-hook #'org-tree-slide-play #'jp/presentation-setup)
(add-hook #'org-tree-slide-stop #'jp/presentation-end)

#+end_src

*** Babel (Programming Languages in Org)
**** PlantUML
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
;; Enable PlantUML Diagrams
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
;; Jar Configuration
(setq org-plantuml-jar-path (concat (getenv "HOME") "/.emacs.d/.local/etc/plantuml.jar"))
(setq plantuml-default-exec-mode 'jar)

;; Sample executable configuration
;;(setq plantuml-executable-path "/path/to/your/copy/of/plantuml.bin")
;;(setq plantuml-default-exec-mode 'executable)
#+end_src
**** OrgBabel Languages
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (python . t)
   (LaTeX . t)
   (plantuml . t)
   (emacs-lisp . t)))
#+end_src
**** Turn Tangle Comments off
Since Emacs 28 OrgBabel tangle creates comments like ="[[%link][%source-name]]"= to indicate the source of tangled code. The following lines deactivate this behavior:
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq org-babel-tangle-comment-format-beg ""
      org-babel-tangle-comment-format-end "")
#+end_src

*** TODO BibTeX (Literature Management)

My BibTeX configuration is based on [[https://github.com/org-roam/org-roam-bibtex/blob/master/README.md#doom-emacs][Org Roam BibTeX README]].
The [[https://github.com/org-roam/org-roam-bibtex/blob/master/doc/orb-manual.org][manual]] provides some additional information.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here

;; Helm Autocompletion
(autoload 'helm-bibtex "helm-bibtex" "" t)

;; Ivy Autocompletion
;;(autoload 'ivy-bibtex "ivy-bibtex" "" t)
;; ivy-bibtex requires ivy's `ivy--regex-ignore-order` regex builder, which
;; ignores the order of regexp tokens when searching for matching candidates.
;; Add something like this to your init file:
(setq ivy-re-builders-alist
      '((ivy-bibtex . ivy--regex-ignore-order)
        (t . ivy--regex-plus)))

(setq bibtex-file-path (concat org-roam-directory "/BibTeX/")
      bibtex-files '("Library.bib" "Master.bib")
      bibtex-completion-bibliography '("~/ZK/BibTeX/Library.bib" "~/ZK/BibTeX/Master.bib")
      bibtex-completion-library-path '("~/nc/Library/BibTeX/"))

#+end_src

** Org-Roam Specific
*** Zettelkasten Files and Basic Variables

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(require 'org-protocol)    ; Enable org protocol for links (org-roam://...)
(require 'org-roam-protocol)
(require 'org-protocol-capture-html)

(setq org-roam-directory (file-truename "~/ZK")   ; Set org-roam directory
      org-roam-dailies-directory (file-truename "~/ZK/daily")
      org-attach-id-dir (concat org-roam-directory "/.attachments")
      org-id-locations-file "~/ZK/.orgids"
      org-roam-completion-everywhere nil
      org-roam-completion-system 'default
      ;;org-roam-graph-executable "neato" ; or "dot" (default)
      )

#+end_src

*** Org-Roam Buffer

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq org-roam-mode-section-functions
      (list #'org-roam-backlinks-section
            #'org-roam-reflinks-section
            #'org-roam-unlinked-references-section
            ))

#+end_src

*** Org-Roam UI

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

* TODO Additional Packages
** Dired (File Manager)

:SOURCE:
Original by [[https://www.distrotube.com/][Derek Taylor]] (see [[https://gitlab.com/dwt1/dotfiles][dwt1/dotfiles]])
:END:

*** Dired Configuration

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)


;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))

#+end_src

*** Keybindings for Dired
**** Keybindings To Open Dired (Description)

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

**** Keybinding Configuration (~SPC-<Key>~)

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(map! :leader
      ;; (:prefix ("d" . "dired")
      ;;  :desc "Open dired" "d" #'dired
      ;;  :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

#+end_src

**** Keybindings Within Dired (Description)

| COMMAND             | DESCRIPTION                                 | KEYBINDING |
|---------------------+---------------------------------------------+------------|
| dired-view-file     | /View file in dired/                          | SPC d v    |
| dired-up-directory  | /Go up in directory tree/                     | h          |
| dired-find-file     | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line     | Move down to next line                      | j          |
| dired-previous-line | Move up to previous line                    | k          |
| dired-mark          | Mark file at point                          | m          |
| dired-unmark        | Unmark file at point                        | u          |

**** Dired-Mode-Mapping

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/dired-hide-dotfiles()
    (setq dired-omit-files
          (rx (or (seq bol (? ".") "#")
                  (seq bol "." eol)
                  (seq bol ".." eol)
                  )))
    )

;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
;;  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
;;  (kbd "H") #'jp/dired-hide-dotfiles
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)


;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)

#+end_src

** Languages (IDE using Language Server)

:SOURCE:
Adapted from [[https://github.com/daviwil/emacs-from-scratch.git][daviwil/emacs-from-scratch]].
:END:

*** IDE Features with lsp-mode
**** lsp-mode

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] enables IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

  (defun jp/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . jp/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(use-package dap-mode
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)
  :commands dap-debug
  :config
  ;; Set up Node debugging
  (require 'dap-node)
  (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out the [[https://emacs-lsp.github.io/lsp-pyright][documentation of =lsp-pyright= ]]in the =lsp-mode= documentation for more details.

Make sure you have the =lsp-pyright= language server installed before trying =lsp-mode=!

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(defun jp/python-mode-hook()
  (require 'lsp-pyright)
  (require 'dap-python)
  (lsp-deferred))

(add-hook 'python-mode-hook #'jp/python-mode-hook)

;; NOTE: Set these if Python 3 is called "python3" on your system!
(setq python-shell-interpreter "python3")
(setq dap-python-executable "python3")
(setq dap-python-debugger 'debugpy)


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))

#+end_src

*** TODO TypeScript (deactivated)

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Company Mode (Autocompletion)

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
   ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Projectile

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; NOTE: Set this to the folder where you keep your Git repos!
(when (file-directory-p "~/Projects/Code")
  (setq projectile-project-search-path '("~/Projects/Code")))
(setq projectile-switch-project-action #'projectile-dired)

(setq projectile-completion-system 'vertico)

#+end_src

** Eshell

:SOURCE:
Adapted from [[https://github.com/daviwil/emacs-from-scratch.git][daviwil/emacs-from-scratch]].
:END:

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

  (defun jp/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . jp/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

** HOLD Magit

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Optional Magit Configuration

#+end_src

** Mail in Emacs with mu4e

:SOURCE:
Adapted from [[https://github.com/daviwil/dotfiles.git][daviwil/dotfiles]].
:END:

[[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is the best mail interface I've ever used because it's fast and makes it really easy to power through a huge e-mail backlog.  Love the ability to capture links to emails with org-mode too.

Useful mu4e manual pages:

- [[https://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html#MSGV-Keybindings][Key bindings]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html#Org_002dmode-links][org-mode integration]]

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

;; Tell Emacs where to find mu4e (only necessary if manual compiled)
(pcase system-type
  ((or 'gnu/linux 'windows-nt 'cygwin)
   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e"))
  ('darwin
   (use-package mu4e
     :load-path  "/opt/homebrew/share/emacs/site-lisp/mu/mu4e/")))

;; Load org-mode integration
;;(require 'mu4e-org)

(after! mu4e
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  ;; Use Ivy for mu4e completions (maildir folders, etc)
  ;;(setq mu4e-completing-read-function #'ivy-completing-read)

  ;; Make sure that moving a message (like to Trash) causes the
  ;; message to get a new file name.  This helps to avoid the
  ;; dreaded "UID is N beyond highest assigned" error.
  ;; See this link for more info: https://stackoverflow.com/a/43461973
  (setq mu4e-change-filenames-when-moving t)

  ;; Make sure to use 24h time format.
  (setq mu4e-headers-time-format "%T" ; %T: Full 24h-Time [same as %H:%M:%S] (e.g. 23:59:59)
        mu4e-headers-date-format "%d/%m/%y"
        ;;mu4e-view-date-format "%F %T" ; %F: Full date [like %+4Y-%m-%d] (e.g. 2021-12-31)
        ;;mu4e-date-format-long "%F %T"
        ;;mu4e-headers-long-date-format "%F %T"
        )

  ;; Set up contexts for email accounts
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "Mailbox"
            :match-func (lambda (msg) (when msg
                                        (string-prefix-p "/Mailbox" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-full-name . "Jonathan Pieper")
                    (user-mail-address . "jpieper@mailbox.org")
                    (mu4e-sent-folder . "/Mailbox/Sent")
                    (mu4e-trash-folder . "/Mailbox/Trash")
                    (mu4e-drafts-folder . "/Mailbox/Drafts")
                    (mu4e-refile-folder . "/Mailbox/Archives")
                    (mu4e-sent-messages-behavior . sent)
                    ))
          ,(make-mu4e-context
            :name "Personal"
            :match-func (lambda (msg) (when msg
                                        (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
            :vars '(
                    (mu4e-sent-folder . "/Personal/Sent")
                    (mu4e-trash-folder . "/Personal/Deleted")
                    (mu4e-refile-folder . "/Personal/Archive")
                    ))
          ))
  (setq mu4e-context-policy 'pick-first)

  ;; Prevent mu4e from permanently deleting trashed items
  ;; This snippet was taken from the following article:
  ;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
  (defun remove-nth-element (nth list)
    (if (zerop nth) (cdr list)
      (let ((last (nthcdr (1- nth) list)))
        (setcdr last (cddr last))
        list)))

  ;; Display options
  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses 't)

  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t)

  ;; Use mu4e for sending e-mail
  (setq mail-user-agent 'mu4e-user-agent
        message-send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.mailbox.org"
        smtpmail-smtp-service 465
        smtpmail-stream-type  'ssl)

  ;; Signing messages (use mml-secure-sign-pgpmime)
  (setq mml-secure-openpgp-signers '("2361DFC839413E7A84B2152B01B6FB927AAEC59B"))

  ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
  ;; additional non-Gmail addresses and want assign them different
  ;; behavior.)

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.
  (setq mu4e-maildir-shortcuts
        '(("/Mailbox/INBOX"       . ?i)
          ("/Mailbox/INBOX/*"     . ?l)
          ("/Mailbox/Sent"        . ?s)
          ("/Mailbox/Trash"       . ?t)))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes"
                :query "maildir:/Mailbox/INBOX OR maildir:/Personal/Inbox"
                :key ?i))
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Uni-Frankfurt"
                :query "from:/.*@uni-frankfurt/ OR maildir:/Personal/Uni"
                :key ?g))
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Family"
                :query "from:baerbel OR from:pieper OR from:kaiser OR from:kessler OR from:thewake35 OR maildir:/Mailbox/familie"
                :key ?m))

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  (setq jp/mu4e-inbox-query
        "(maildir:/Personal/Inbox OR maildir:/Mailbox/INBOX) AND flag:unread")

  (defun jp/go-to-inbox ()
    (interactive)
    (mu4e-headers-search jp/mu4e-inbox-query)

    (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
    (add-to-list 'mu4e-marks
                 '(trash
                   :char ("d" . "▼")
                   :prompt "dtrash"
                   :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                   :action (lambda (docid msg target)
                             (mu4e~proc-move docid
                                             (mu4e~mark-check-target target) "-N"))))

    ;; Use [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]]
    ;; to show notifications when e-mail comes in.
    ;; Show unread emails from all inboxes
    (setq mu4e-alert-interesting-mail-query jp/mu4e-inbox-query)

    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)

    (mu4e-alert-enable-notifications)))

#+end_src

** Password Save

#+begin_src emacs-lisp :tangle ./.doom.d/config.el

(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil)

(defun jp/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
      nil)))

(defun jp/enable-bitwarden ()
  (interactive)
  (setq bitwarden-automatic-unlock
        (let* ((auth-sources '("~/.authinfo.gpg"))
               (matches (auth-source-search :user "jpieper@mailbox.org"
                                            :host "bw.ody5.de"
                                            :require '(:secret)
                                            :max 1))
               (entry (nth 0 matches)))
          (plist-get entry :secret)))
  (bitwarden-auth-source-enable))

#+end_src

** Deft
#+begin_src emacs-lisp :tangle ./.doom.d/config.el
(setq deft-directory "~/org")
#+end_src

#+title: Guix
#+PROPERTY: header-args                :mkdirp yes
#+PROPERTY: header-args:emacs-lisp     :eval never-export
#+PROPERTY: header-args:bash           :tangle-mode (identity #o755) :comments link :shebang "#!/usr/bin/env bash"
#+PROPERTY: header-args:sh             :tangle-mode (identity #o755) :comments link :shebang "#!/bin/sh"
#+PROPERTY: header-args:scheme         :comments link
#+OPTIONS: broken-links:auto h:6 toc:nil

:SOURCE:
Adapted from [[https://github.com/SqrtMinusOne/dotfiles][SqrtMinusOne/dotfiles]] -> [[https://github.com/SqrtMinusOne/dotfiles/blob/master/Guix.org][Guix.org]]
:END:

* Profiles
A profile is a way to group Guix packages. Amongst its advantages, profiles can be defined by manifests, which in turn can be stored in VCS.

References:
- [[https://guix.gnu.org/en/cookbook/en/html_node/Guix-Profiles-in-Practice.html][Guix Profiles in Practice]]

** Activate Profiles
:Source:
[[https://github.com/daviwil/dotfiles/blob/master/Systems.org#activating-profiles][David Wilson's config]]
:END:

A script to activate guix profiles. Usage:

#+begin_example
activate-profiles [profile1] [profile2] ...
#+end_example

#+begin_src bash :tangle ./bin/scripts/activate-profiles
GREEN='\033[1;32m'
RED='\033[1;30m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$HOME/.config/guix/manifests/*.scm";
fi

for profile in $profiles; do
  # Remove the path and file extension, if any
  profileName=$(basename $profile)
  profileName="${profileName%.*}"
  profilePath="$GUIX_EXTRA_PROFILES/$profileName"
  manifestPath=$HOME/.config/guix/manifests/$profileName.scm

  if [ -f $manifestPath ]; then
    echo
    echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
    echo

    mkdir -p $profilePath
    guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

    # Source the new profile
    GUIX_PROFILE="$profilePath/$profileName"
    if [ -f $GUIX_PROFILE/etc/profile ]; then
        . "$GUIX_PROFILE"/etc/profile
    else
        echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
    fi
  else
    echo "No profile found at path" $profilePath
  fi
done
#+end_src

** Update profiles
A script to update Guix profiles. Usage:

#+begin_example
update-profiles [profile1] [profile2] ...
#+end_example

:Source:
[[https://github.com/daviwil/dotfiles/blob/master/Systems.org#activating-profiles][David Wilson's config]]
:END:

#+begin_src bash :tangle ./bin/scripts/update-profiles
GREEN='\033[1;32m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$GUIX_EXTRA_PROFILES/*";
fi

for profile in $profiles; do
  profileName=$(basename $profile)
  profilePath=$GUIX_EXTRA_PROFILES/$profileName

  echo
  echo -e "${GREEN}Updating profile:" $profilePath "${NC}"
  echo

  guix package --profile="$profilePath/$profileName" --manifest="$HOME/.config/guix/manifests/$profileName.scm"
done
#+end_src

** Run =guix package= in profile
#+begin_src bash :tangle ./bin/scripts/pp
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profileName=$(basename $1)
profileName="${profileName%.*}"
profilePath="$GUIX_EXTRA_PROFILES/$profileName"

if [ -d $profilePath ]; then
    guix package --profile="$profilePath/$profileName" ${@:2}
else
    echo -e "No profile found at path: " $profilePath
fi

#+end_src

* Channels
Specifying additional channels.

References:
- [[https://gitlab.com/nonguix/nonguix][nonguix channel repo]]
- [[https://guix.gnu.org/manual/en/html_node/Channels.html][Guix channels reference]]

#+begin_src scheme :tangle .config/guix/channels.scm
(cons*
 (channel
  (name 'flat)
  (url "https://github.com/flatwhatson/guix-channel.git")
  (introduction
   (make-channel-introduction
    "33f86a4b48205c0dc19d7c036c85393f0766f806"
    (openpgp-fingerprint
     "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  ;; (commit "d54973e47b89fe5772a5b6e2d0c0b86acb089e27")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 (channel
  ;; What can possibly go wrong, huh
  (name 'guix-gaming-games)
  (url "https://gitlab.com/guix-gaming-channels/games.git")
  ;; Enable signature verification:
  (introduction
   (make-channel-introduction
    "c23d64f1b8cc086659f8781b27ab6c7314c5cca5"
    (openpgp-fingerprint
     "50F3 3E2E 5B0C 3D90 0424  ABE8 9BDC F497 A4BB CC7F"))))
 %default-channels)
#+end_src

* Systems
Configuring systems with Guix.

Yes, all my machines are named after colors I like.

** Base configuration
The base configuration is shared between all the machines.

While it's possible to make a single =.scm= file with base configuration and load it, I noticed that it produces more cryptic error messages whenever there is an error in the base file, so I opt-in for noweb.

=guix system= invocation is as follows:

#+begin_example
sudo -E guix system reconfigure ~/.config/guix/systems/[system].scm
#+end_example

Common modules:
#+begin_src scheme :tangle no :noweb-ref system-common
(use-modules (gnu))
(use-modules (gnu system nss))
(use-modules (gnu packages bash))
(use-modules ((gnu packages base) #:select (coreutils glibc)))
(use-modules (gnu packages certs))
(use-modules (gnu packages version-control))
(use-modules (gnu packages vim))
(use-modules (gnu packages gnome))
(use-modules (gnu packages xorg))
(use-modules (gnu packages wm))
(use-modules (gnu packages openbox))
(use-modules (gnu services docker))
(use-modules (gnu services cups))
(use-modules (gnu services virtualization))
(use-modules (srfi srfi-1))
(use-modules (guix channels))
(use-modules (guix inferior))
(use-modules (nongnu packages linux))
(use-modules (nongnu system linux-initrd))

(use-service-modules desktop networking ssh xorg nix)
(use-package-modules ssh)
#+end_src

In principle, we could define a variable called =base-operating-system= and extend it in ancestors. However, then we would have to define mandatory fields like =host-name=, =bootloader= with dummy values. Since I'm already using noweb, there is little point.

The following code will be inserted at the top of the =operating-system= definition.

Use the full Linux kernel. I hope I'll be able to use Libre kernel somewhere later.

Inferior in the kernel is used to avoid recompilation. It looks like I can pin these to different commits than in my =channels.scm=
#+begin_src scheme :tangle no :noweb-ref system-base
(kernel
 (let*
     ((channels
       (list (channel
              (name 'nonguix)
              (url "https://gitlab.com/nonguix/nonguix")
              (commit "393b8e0405f44835c498d7735a8ae9ff4682b07f"))
             (channel
              (name 'guix)
              (url "https://git.savannah.gnu.org/git/guix.git")
              (commit "4c812db049d5c9f2c438748e180f9486ad221b0a"))))
      (inferior
       (inferior-for-channels channels)))
   (first (lookup-inferior-packages inferior "linux" "5.15.12"))))
;; (kernel linux)
(initrd microcode-initrd)
(firmware (list linux-firmware))
(locale "en_US.utf8")
(timezone "Europe/Moscow")
#+end_src

Setting keyboard layout, switch with Alt+Shift.
#+begin_src scheme :tangle no :noweb-ref system-base
(keyboard-layout (keyboard-layout "de" "neo"))
#+end_src

User accounts.
#+begin_src scheme :tangle no :noweb-ref system-base
(users (cons* (user-account
               (name "jpi")
               (comment "Jonathan Pieper")
               (group "users")
               (home-directory "/home/jpi")
               (supplementary-groups
                '("wheel"  ;; sudo
                  "netdev" ;; network devices
                  "audio"
                  "video"
                  "input"
                  "tty"
                  "docker"
                  "scanner"
                  "libvirt"
                  "lp")))
              %base-user-accounts))

#+end_src

Base packages, necessary right after the installation.
#+begin_src scheme :tangle no :noweb-ref system-base
(packages
 (append
  (list nss-certs
	    git
        i3-gaps
        i3lock
        openbox
        xterm
	    vim)
  %base-packages))
#+end_src

Default services for each machine:
- override the default =%desktop-services= to add OpenVPN support
- add nix service
- add docker service
- add CUPS service
- add libvirt service
- add a symlink to ELF interpreter to where most Linux binaries expect it
#+begin_src scheme :tangle no :noweb-ref system-common
(define %my-base-services
  (cons*
   (service openssh-service-type)
   (screen-locker-service i3lock "i3lock")
   (extra-special-file "/lib64/ld-linux-x86-64.so.2" (file-append glibc "/lib/ld-linux-x86-64.so.2"))
   (service nix-service-type)
   (service cups-service-type
            (cups-configuration
             (web-interface? #t)))
   (service docker-service-type)
   (service libvirt-service-type
            (libvirt-configuration
             (unix-sock-group "libvirt")
             (tls-port "16555")))
   (service virtlog-service-type)
   (modify-services %desktop-services
                    (network-manager-service-type
                     config =>
                     (network-manager-configuration
                      (inherit config)
                      (vpn-plugins (list network-manager-openvpn)))))))

#+end_src

** Putting it all Together
*** TODO Desktop PC
=hera= is my desktop PC.

#+begin_src scheme :noweb yes :tangle ~/.config/guix/systems/hera.scm
<<system-common>>

(operating-system
 <<system-base>>

 (host-name "hera")
 (services (cons*
            (set-xorg-configuration
             (xorg-configuration
              (keyboard-layout keyboard-layout)))
            %my-base-services))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (target "/boot/efi")
   (keyboard-layout keyboard-layout)))

 ;; (swap-devices
 ;;  (list (uuid "3a77c542-7d24-46ff-8123-f7398d1c2677")))

 ;; (file-systems
 ;;  (cons* (file-system
 ;;          (mount-point "/")
 ;;          (device (file-system-label "my-root"))
 ;;          (type "ext4"))
 ;;         (file-system
 ;;          (mount-point "/boot/efi")
 ;;          (device "/dev/sda1")
 ;;          (type "vfat"))
 ;;         %base-file-systems)))
#+end_src
*** TODO Laptop
=eumolos= is a HP 15s laptop.

=%backlight-udev-rule= should enable members of =video= group change the display backlight. See the relevant page at [[https://wiki.archlinux.org/title/Backlight][Arch Wiki]].

#+begin_src scheme :noweb yes :tangle ~/.config/guix/systems/eminence.scm
<<system-common>>

(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

(operating-system
 <<system-base>>

 (host-name "eumolos")
 (services (cons*
            (set-xorg-configuration
             (xorg-configuration
              (keyboard-layout keyboard-layout)))
            (modify-services %my-base-services
                             (elogind-service-type
                              config =>
                              (elogind-configuration
                               (inherit config)
                               (handle-lid-switch-external-power 'suspend)))
                             (udev-service-type
                              config =>
                              (udev-configuration
                               (inherit config)
                               (rules (cons %backlight-udev-rule
                                            (udev-configuration-rules config))))))))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (target "/boot/efi")
   (keyboard-layout keyboard-layout)))

 ;; (swap-devices
 ;;  (list (uuid "f93cf3f6-7ee7-42ec-8ee2-f3d896fdf9b5")))

 ;; (file-systems
 ;;  (cons* (file-system
 ;;          (mount-point "/")
 ;;          (device
 ;;           (uuid "1d937704-bbeb-43b5-bc63-453886c426af"
 ;;                 'ext4))
 ;;          (type "ext4"))
 ;;         (file-system
 ;;          (mount-point "/boot/efi")
 ;;          (device (uuid "0031-3784" 'fat32))
 ;;          (type "vfat"))
 ;;         %base-file-systems)))
#+end_src

*** TODO nasserver
=nasserver= is a PC.

=%backlight-udev-rule= should enable members of =video= group change the display backlight. See the relevant page at [[https://wiki.archlinux.org/title/Backlight][Arch Wiki]].

#+begin_src scheme :noweb yes :tangle ~/.config/guix/systems/azure.scm
<<system-common>>

(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

(operating-system
 <<system-base>>

 (host-name "azure")
 (services (cons*
            (set-xorg-configuration
             (xorg-configuration
              (keyboard-layout keyboard-layout)))
            (modify-services %my-base-services
                             (elogind-service-type config =>
                                                   (elogind-configuration (inherit config)
                                                                          (handle-lid-switch-external-power 'suspend)))
                             (udev-service-type config =>
                                                (udev-configuration (inherit config)
                                                                    (rules (cons %backlight-udev-rule
                                                                                 (udev-configuration-rules config))))))))

 (bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (target "/boot/efi")
   (keyboard-layout keyboard-layout)))

 ;; (swap-devices
 ;;  (list (uuid "4b2dedb3-b111-4e69-8c05-6daa2b072c76")))

 ;; (file-systems
 ;;  (cons* (file-system
 ;;          (mount-point "/")
 ;;          (device (file-system-label "my-root"))
 ;;          (type "ext4"))
 ;;         (file-system
 ;;          (mount-point "/boot/efi")
 ;;          (device "/dev/sda1")
 ;;          (type "vfat"))
 ;;         %base-file-systems)))
#+end_src
